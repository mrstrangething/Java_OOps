
what is Class -
It defines the properties (fields) and behaviors (methods) that objects created from the class will have. 
A class is a template for creating objects.

what is Object -
An object in programming is an instance of a class. It represents a specific entity that combines data (fields or attributes) and behavior (methods) defined by the class. 
Think of a class as a blueprint, and an object as a real-world instance created from that blueprint.

public class ClassName {
    // Fields (variables)
    int field1;
    String field2;

    // Constructor
    public ClassName() {
        // Initialization code
    }

    // Methods
    public void method1() {
        // Method code
    }
}

what is instance variable-
-An instance variable is a variable that is declared inside a class but outside of any method, constructor, or block. 
It is associated with an instance (object) of the class, meaning each object of the class has its own copy of the instance variables. 
These variables are used to store the state or properties of an object.

The difference between an instance and a reference lies in their roles in object-oriented programming:

Instance:
-An instance is the actual object created from a class. It represents a concrete realization of the class blueprint.
When you create an object using the new keyword (in languages like Java, C#, etc.), you are creating an instance of the class.
Example: If Car is a class, then myCar = new Car(); creates an instance of the Car class.

Reference:
-A reference is a variable that holds the memory address of the instance (object). It acts as a pointer to the object in memory.
You use the reference to interact with the instance (e.g., calling methods or accessing properties).
Multiple references can point to the same instance, but they are not the instance itself.

what is the difference between method and constructor?

-The difference between a method and a constructor lies in their purpose, definition, and behavior within a class. 
Here's a breakdown:

1. Purpose
Constructor: Used to initialize an object when it is created. 
It sets up the initial state of the object by assigning values to instance variables or performing setup tasks.
Method: Represents a behavior or action that an object can perform. Methods are called explicitly to execute specific logic.

2. Name
Constructor: Must have the same name as the class.
Method: Can have any name, as long as it follows the naming conventions.

3. Return Type
Constructor: Does not have a return type, not even void.
Method: Must have a return type (e.g., void, int, String, etc.) or can return nothing (void).

4. Invocation
Constructor: Automatically called when an object is created using the new keyword.
Method: Explicitly called on an object after it is created.

5. Overloading
Constructor: Can be overloaded (multiple constructors with different parameter lists).
Method: Can also be overloaded.